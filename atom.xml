<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://heuje.top</id>
    <title>Heuje</title>
    <updated>2019-06-17T03:06:26.414Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://heuje.top"/>
    <link rel="self" href="https://heuje.top/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://heuje.top/images/avatar.png</logo>
    <icon>https://heuje.top/favicon.ico</icon>
    <rights>All rights reserved 2019, Heuje</rights>
    <entry>
        <title type="html"><![CDATA[vim编辑器]]></title>
        <id>https://heuje.top/post/vim-bian-ji-qi</id>
        <link href="https://heuje.top/post/vim-bian-ji-qi">
        </link>
        <updated>2019-06-17T02:37:29.000Z</updated>
        <content type="html"><![CDATA[<p>文本编辑器vim
vim的工作模式
进入与退出vim
vim
vim 是 “vimsual interface IMproved”的简称，它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的</p>
<p>vim 不是一个排版程序，它不像MS Word 或 WPS 那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序</p>
<p>vim 是全屏幕文本编辑器，它没有菜单，只有命令
<img src="https://heuje.top/post-images/1560740527968.png" alt=""></p>
<p>文本编辑器的模式
1）命令行模式
2）输入模式、编辑模式
3）末行模式
4）替换模式
命令行模式</p>
<p>存盘 ZZ 保存退出</p>
<p>光标移动：
移动光标 h j k l 左 下 上 右
光标移到本行开头home
移到本行末尾 end
光标移到末尾 G
光标移到开头gg
光标移动一个单词w</p>
<p>粘贴复制：
复制一行 yy 复制 n行 nyy
粘贴 p</p>
<p>删除:
删除字符 x 向后删除 X 向前删除
删除一行 dd ndd
删除一个单词 dw</p>
<p>撤销：
撤销操作 u 向上一步 . 重复上一次操作</p>
<p>查找:
查找/string define \ 转义字符 查找“/bin/bash” //bin/bash</p>
<p>删除与修改
“编辑”是指文字的添加、修改以及删除，甚至包括文字区块的移动、复制等。
在vim 中一般认为输入与编辑是两个概念。
编辑是在命令模式下进行的，先利用命令移动光标来定位到要进行编辑的地方，然后再使用相应的命令进行编辑；而输入是在插入模式下进行的。</p>
<p>在命令模式下常用的编辑命令：
x     删除光标所在字符。
dd     删除光标所在的行。
r     修改光标所在字符，r 后是要修正的字符。
R     进入替换状态，输入的文本会覆盖原先的资料。
s     删除光标所在字符，并进入输入模式。
S     删除光标所在的行，并进入输入模式。
cc     修改整行文字。
u     撤消上一次操作。
.     重复上一次操作。
编辑模式</p>
<p>输入模式
在输入模式下，屏幕的左下方会出现INSERT 字样。
在输入状态下，用户可以输入文本的内容<br>
在插入模式下也可以删除字符，而标准的vim 编辑器在编辑状态下不能删除字符，只能插入字符</p>
<p>如何从命令行模式进入输入模式
a 从光标所在位置后面开始输入资料，光标后的资料随增加的资料向后移动。
A 从光标所在行最后面的位置开始输入资料。</p>
<p>插入（insert）
i 从光标所在位置前面开始插入资料，光标后的资料随新增资料向后移动。
I 从光标所在行的第一个非空白字符前面开始插入资料。</p>
<p>开始（open）
o 在光标所在行下新增一行并进入输入模式。
O 在光标所在行上方新增一行并进入输入模式。</p>
<p>如何退出输入模式
esc
末行模式</p>
<p>末行模式
只要在命令模式下输入命令“：”即可进入末行模式。</p>
<p>在末行模式下，可以进行保存文件、退出vim、进行查找和替换等操作。
:</p>
<p>当同时编辑多个文件时  因为同一时间只能显示一个文件，所以在VI中切换打开的文件可以使用N或n来切换打开的文件
:n 切换下一个文件
:N 切换上一个文件
:q 退出
:q! 强制退出不保存
:w
:wq</p>
<p>替换
:s/old/new 只替换光标所在行的第一个old string
:s/old/new/g 将本行（光标）的所有old string替换为new string   g global  n代表一个行号
:%s/old/new/g 将本文中所有的old string替换为new string
:1,2s/old/new/g 替换1到2行中的old string为new string
:.,2s/old/new/g .代表光标所在行 当前行到第二行的
:2,$s/old/new/g 替换2到最后一行中的old string为new string</p>
<p>:set nu 显示行号
:set nonu
:!command 在vim编辑器中执行一条命令（不许要退出当前的编辑，可以在编辑器中执行命令，类似退出编辑器执行命令）</p>
<p>查找
/string                    将光标定位到string 所在的行。
?string                    将光标移动到最近的一个包含 string 字符串的行
:n                          把光标定位到文件的第n 行。</p>
<p>保存文档
可以用:n，mw filename 命令将第n 行到第m 行的文字存放的所指定的filename 文件中。
替换模式</p>
<p>命令行下按R键进入替换模式
退出
esc
相关配置文件</p>
<p>~/.viminfo vim历史编辑文档</p>
<p>~/.vimrc vim个性设置文档</p>
<p>自定义文件头注释 ~/.vimrc</p>
<pre><code>autocmd BufNewFile *.py,*.sh,*.c exec &quot;:call SetTitle()&quot;

func SetTitle()
        if &amp;filetype == 'python'
                call setline(1,&quot;\#!/usr/bin/env python&quot;)
                call append(line(&quot;.&quot;),&quot;\#enconding=utf-8&quot;)
                call append(line(&quot;.&quot;)+1, &quot;\#Author: Bai Shuming&quot;)
                call append(line(&quot;.&quot;)+2, &quot;\#Created Time: &quot;.strftime(&quot;%Y/%m/%d %H:%M&quot;))
                call append(line(&quot;.&quot;)+3, &quot;&quot;)
    elseif &amp;filetype == 'sh'
                call setline(1,&quot;\#!/usr/bin/env bash&quot;)
                call append(line(&quot;.&quot;),&quot;\#enconding=utf-8&quot;)
                call append(line(&quot;.&quot;)+1, &quot;\#Author: Bai Shuming&quot;)
                call append(line(&quot;.&quot;)+2, &quot;\#Created Time: &quot;.strftime(&quot;%Y/%m/%d %H:%M&quot;))
                call append(line(&quot;.&quot;)+3, &quot;&quot;)
    elseif &amp;filetype == 'c'
        call setline(1,&quot;#include &lt;stdio.h&gt;&quot;)
        call append(line(&quot;.&quot;), &quot;&quot;)
        endif

endfunc
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker下MySQL基本操作]]></title>
        <id>https://heuje.top/post/docker-xia-mysql-ji-ben-cao-zuo</id>
        <link href="https://heuje.top/post/docker-xia-mysql-ji-ben-cao-zuo">
        </link>
        <updated>2019-06-05T04:50:55.000Z</updated>
        <content type="html"><![CDATA[<p>安装:
在docker仓库搜索MySQL镜像
docker search mysql
下载镜像
docker pull mysql
查看本地镜像
docker images -a</p>
<p>启动MySQL</p>
<ol>
<li>
<p>启动 mysql 容器，并进入 shell 命令交互界面： docker run -it mysql /bin/bash
(  参数 -i -t 等价于 -it  表示insert , 进入 ;  /bin/bash 表示 shell 脚本交互界面 )</p>
</li>
<li>
<p>可用 mysql --help | grep Distrib 查看 mysql 版本信息
（ mysql --help 查看帮助信息，并在结果集中 查找 Distrib ，
“|”单竖线表示命令的连续执行，同时以前一个命令值域作为后一个命令的定义域 ）</p>
</li>
<li>
<p>退出 当前交互窗口：exit 。此操作会关闭 mysql 服务 。
（对于创建的bush 容器，exit 退出后，容器也会退出。
这是因为对Docker 来说，容器中的应用退出了，容器也就没有必要继续运行了。）</p>
</li>
</ol>
<p>—— 想要服务一直运行可以：</p>
<h2 id="docker-run-p-33063306-name-jy_mysql-e-mysql_root_password123456-d-mysql参数-p-设置端口-name-取名-e-mysql_root_password123456-设置-账号为-root-密码为-123456-d-表示作为一个守护进程在后台运行"><code>docker run -p 3306:3306 --name JY_mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</code>
（参数 -p 设置端口，--name 取名 ，-e MYSQL_ROOT_PASSWORD=123456 设置 账号为 root ，密码为 123456 ，    -d 表示作为一个守护进程在后台运行 ）</h2>
<p>原文：https://blog.csdn.net/jiangyu1013/article/details/79958410</p>
<p>进入MySQL
<code>docker ps -a</code>
docker port 容器名字
至于相关文件地址配置 ，可以在运行容器时设置(但要求对应路径对应文件已存在，才能成功挂载相内容到对应位置。)
<code>docker run -p 3306:3306 --name mysql -v $PWD/conf/my.cnf:/etc/mysql/my.cnf -v $PWD/logs:/logs -v</code>$PWD/data:/mysql_data -e MYSQL_ROOT_PASSWORD=123456 -d mysql
命令说明：</p>
<p>-p 3306:3306：将容器的3306端口映射到主机的3306端口</p>
<p>-v $PWD/conf/my.cnf:/etc/mysql/my.cnf：将主机当前目录下的conf/my.cnf挂载到容器的/etc/mysql/my.cnf</p>
<p>-v $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs</p>
<p>-v $PWD/data:/mysql_data：将主机当前目录下的data目录挂载到容器的/mysql_data</p>
<p>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码</p>
<p><code>docker exec -it 8b6952783afc /bin/bash</code></p>
<p>Ctrl + D退出</p>
<pre><code>mysql -u root
use mysql
</code></pre>
<p>设置密码:
<code>UPDATE user SET password=PASSWORD('新的密码') WHERE user='root';</code></p>
<p>设置存储上限
修改mysql/bin/my.ini
<code>max_allowed_packet = 16M</code></p>
<p>登录数据库服务
<code>mysql -h 127.0.0.1 -u root -p -P 3306</code></p>
<p>修改权限，使得用户在其他主机仍然能够登录root用户并访问数据库
<code>grant all privileges on *.* to 'root'@'%' identified by '你的密码' with grant option;</code></p>
<p>修改sql_mode:
<code>set sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';</code></p>
<p>如果上面设置完成后依然报错，这里执行下面的SQL，将全局设置更改，然后必须关闭现有的连接，重新打开连接后查询即可</p>
<blockquote>
<p><code>set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';</code></p>
</blockquote>
<hr>
<p>原文：https://blog.csdn.net/qq_28867949/article/details/76850378</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://heuje.top/post/hello-gridea</id>
        <link href="https://heuje.top/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>