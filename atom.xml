<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://heuje.top</id>
    <title>Heuje</title>
    <updated>2019-06-19T09:32:23.561Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://heuje.top"/>
    <link rel="self" href="https://heuje.top/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://heuje.top/images/avatar.png</logo>
    <icon>https://heuje.top/favicon.ico</icon>
    <rights>All rights reserved 2019, Heuje</rights>
    <entry>
        <title type="html"><![CDATA[Linux 中的硬链接和软链接]]></title>
        <id>https://heuje.top/post/linux-zhong-de-ying-lian-jie-he-ruan-lian-jie</id>
        <link href="https://heuje.top/post/linux-zhong-de-ying-lian-jie-he-ruan-lian-jie">
        </link>
        <updated>2019-06-19T09:29:27.000Z</updated>
        <content type="html"><![CDATA[<p>在 Linux 的世界里，大部分文件一旦被删除，文件相关的 inode 信息都会被抹掉，文件占用的磁盘空间也会被释放，这种情况下文件名和 inode 是一对一的，删了，就没了。为了满足更复杂的文件操作，Linux 系统的设计者提供了更为高级的服务，那就是硬链接和软链接的技术，这些技术让 Linux 世界里的文件和目录具备了副本和替身的能力。效果就是，你明明删除了某个文件，但是如果有人在你删除之前做了文件的硬链接，你会发现同样内容的文件依旧存在于系统中，而你刚刚做的修改还在那里冒着热气。</p>
<ul>
<li>硬链接
基于 inode 技术，Linux 允许多个文件名同时指向一个 inode，好处就是，我们可以用不同的文件名去访问同一个文件，每次操作对文件内容的影响会波及到所有「副本」，删除掉一个「副本」，不会影响其他文件。增加一个硬链接文件，仅仅是inode 里的「Links」属性值加一，删除一个硬链接文件，属性值减一。只有「Links」的值为0时，文件才会被彻底删除，回收其占用的空间。
如何创建一个硬链接文件？非常简单：</li>
</ul>
<pre><code>ln sourcefile destfile
</code></pre>
<p>前者是源文件，后者是目标文件，创建完成后，使用 stat 命令查看其中之一，就会发现 Links 的值变为2了，用 ls -i 查看文件，你会发现这两个文件的 inode 号是相同的。</p>
<p>如果我们使用 Vim 在同一个缓冲区（buffer）中打开这两个文件：</p>
<pre><code>vim sourcefile
:new destfile
</code></pre>
<p>以上命令会在 Vim 中打开两个窗口，你在操作其中一个文件时，会发现另一个窗口是同步联动的。</p>
<p>硬链接的应用场景比较广泛，比如多人修改同一个文件、重要文件备份、文件更新、节省磁盘空间等等。这些方便的特性都源于 inode 的设计思想。</p>
<p>注意：我们无法为目录创建硬链接，但是操作系统利用特权偷偷在每个目录下创建了两个硬链接，一个是「.」，另一个是「..」，使用 ls -ai 命令可以看到这两个硬链接目录和 inode 号，前者代表了当前目录，后者代表当前目录的父级目录。</p>
<p>硬链接不创建 inode，所以无法跨文件系统，这一点可以由软链接实现。</p>
<ul>
<li>软连接</li>
</ul>
<p>软链接理解起来比较容易，类似 Windows 系统中的快捷方式。</p>
<p>软链接会创建新的 inode，inode 里主要记录了源文件的路径，当访问软链接文件时，系统会帮你自动指向源文件，无论你操作的是源文件，还是软链接文件，其实你最终操作的都是源文件，源文件删除了，软连接文件就成了无本之木，也就毫无意义，强制访问的后果就是「No such file or directory」。</p>
<p>创建软链接的命令如下：</p>
<pre><code>ln -s sourcefile destfile
</code></pre>
<p>尝试用 stat 命令查看这两个文件的 inode 信息。</p>
<p>软链接可以创建目录的软链接，也能跨文件系统存在，在Linux系统中被大量使用。一旦源文件/目录不存在了，软链接的使命也就完结了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用户和组]]></title>
        <id>https://heuje.top/post/yong-hu-he-zu</id>
        <link href="https://heuje.top/post/yong-hu-he-zu">
        </link>
        <updated>2019-06-17T05:16:53.000Z</updated>
        <content type="html"><![CDATA[<pre><code>用户和组
用户创建，删除，修改
密码及密码文件
组创建，删除，修改
组密码及组配置文件
相关文件
linux用户分类

超级管理员: UID为0 root用户拥有至高无上的命令，root用户不能改名

系统用户:UID小于1000，用于管理服务，一般不允许登陆

普通用户:UID大于或等于1000，权限较小，允许登陆，只能使用bin下命令

1.用户创建，删除，修改

useradd命令

 useradd - create a new user or update default new user information


-c,  --comment  描述
-d,  --home HOME_DIR 家目录
-e, --expiredate EXPIRE_DATE  过期时间
-f, --inactive INACTIVE 是否启用过期机制
-g, --gid GROUP   指定组ID号
-G, --groups GROUP1[,GROUP2,...[,GROUPN]]]  附加组
-m, --create-home     建立家目录           
-M                    不建立家目录
           Do not create the user′s home directory, even if the system wide
           setting from /etc/login.defs (CREATE_HOME) is set to yes.

-N, --no-user-group 不指定用户同名组
-r, --system    指定该帐号是系统帐号
-s, --shell SHELL  指定登录shell
-u, --uid UID   指定用户ID号
-U, --user-group 指定用户创建用户同名组
-o 创建用户是可以uid重复


注意：用户名不能超过 32 个字符
usermod命令

usermod - modify a user account
-a, --append
-L, --lock
-U, --unlock
-m, --move-home with -d
userdel命令

userdel - delete a user account and related files
-f, --force
-r, --remove 删除主目录及邮箱
change命令

chage
-h, --help    display this help message and exit
-m 密码可更改的最小天数。为零时代表任何时候都可以更改密码。
-M 密码保持有效的最大天数。
-W 用户密码到期前，提前收到警告信息的天数。
-E 帐号到期的日期。过了这天，此帐号将不可用。
-d 上一次更改的日期    如果设置为0 用户下次登录必须改密码
-i 停滞时期。如果一个密码已过期这些天，那么此帐号将不可用
-l 例出当前的设置。由非特权用户来确定他们的密码或帐号何时过期。
2.密码设置及密码文件

passwd命令

passwd - set user password
-l lock
-u unlock
-d delete a passwd  for an account
-S  This will output a short information about  the  status  of  the password for a given account.
--stdin
    echo linux |passwd --stdin vfast    1 &gt; 0
密码文件

/etc/passwd
   User account information.

       [用户名]：[密码]：[UID]：[GID]：[身份描述]：[主目录]：[登录shell] 

/etc/shadow
           Secure user account information.

                 用户名:这是用户登录系统时使用的用户名，它在系统中是惟一的
                 口令:此字段存放加密的口令
                 最后一次修改的时间:标识从某一时刻起到用户最后一次修改口令的天数
                 最小时间间隔:两次修改口令之间的最小天数
                 最大时间间隔:口令保持有效的最多天数，即多少天后必须修改口令
                 警告时间:从系统开始警告到口令正式失效的天数
                 不活动时间:口令过期多少天后，该账号被禁用
                 失效时间:指示口令失效的绝对天数（从1970年1月1日开始计算）
                 标志:未使用
3.组的管理

groupadd

groupadd - create a new group

命令语法
groupadd [选项] 组名


命令选项
-g, --gid GID        指定GID
-r, --system        创建一个系统组
-o, --non-unique    此选项允许添加一个使用非唯一 GID 的组


注意：组名最长为 32 个字符
groupmod命令

groupmod - modify a group definition on the system

命令语法
groupmod [选项] 组名

命令选项
-g, --gid GID
-n, --new-name NEW_GROUP  给组改名
-o, --non-unique 


例子  
1、将组名为test3的名字改为baism
groupmod test3 -n baism
groupdel命令

groupdel - delete a group
4.组密码及组配置文件

gpasswd命令

gpasswd  newgrp
gpasswd - administer /etc/group and /etc/gshadow
-a, --add USER                add USER to GROUP
-d, --delete USER             remove USER from GROUP
-r, --remove-password         remove the GROUP's password
-R, --restrict                restrict access to GROUP to its members 限制用户登录该组，除了组成员。
-M, --members USER,...        set the list of members of GROUP
-A, --administrators ADMIN,...
                                set the list of administrators for GROUP


案例：
设置组root密码    #gpasswd root
用户组身份切换为root $newgrp root
组管理员设置 #gpasswd test -A user3
限制陌生用户切换到组 #gpasswd -R test
指定组的成员列表   # gpasswd test -M user3,user2
/etc/group
  Group account information.

      [组名]：[密码域]：[GID]：[组员列表] 

/etc/gshadow
  Secure group account information.
5.相关文件

/etc/passwd
        用户账户信息。

/etc/shadow
        安全用户账户信息。

/etc/group
        组账户信息。

/etc/gshadow
         安全组账户信息。

/etc/default/useradd
           账户创建的默认值。

/etc/skel/
           包含默认文件的目录。

/etc/login.defs
           Shadow 密码套件配置。
6.问题：

       当一个用户同时属于多个组，如何切换组身份  newgrp 命令 
            su - user1 
            newgrp test     切换到test组

       如何临时切换到某个外组【用户本身不属于这个组】
            1）首先给外组设置一个组密码 
                 gpasswd root
                 正在修改 root 组的密码
                 新密码：
                 请重新输入新密码
                 su - user1
                 newgrp root
7、作业

要求创建用户harry tom natasha
要求harry tom 附件到admin组
natasha不允许交互登陆

修改默认创建用户环境
要求用户家目录为/rhome
uid,gid从1000开始
登陆shell为/bin/csh
要求:
例如：使用useradd a

创建a的家目录为/rhome/a uid 1000 gid 1000 shell:/bin/csh
</code></pre>
<p><img src="https://heuje.top/post-images/1560750471912.png" alt=""></p>
<pre><code>useradd -u 1500 -G root -d /tmp/user01 -s /bin/bash -c &quot;该用户uid is 1500;附属于root组;家目录为为/tmp/user001;登录shell为/bin/bash&quot; user01

useradd -r -M -s /sbin/nologin user02

useradd -f 3 -e 2019-07-01 user03

useradd  -o  -u 0 -g 0 rooter
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim编辑器]]></title>
        <id>https://heuje.top/post/vim-bian-ji-qi</id>
        <link href="https://heuje.top/post/vim-bian-ji-qi">
        </link>
        <updated>2019-06-17T02:37:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vim的工作模式">* vim的工作模式</h3>
<h3 id="进入与退出vim">* 进入与退出vim</h3>
<h3 id="vim">vim</h3>
<p>vim 是 “vimsual interface IMproved”的简称，它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的</p>
<p>vim 不是一个排版程序，它不像MS Word 或 WPS 那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序</p>
<p>vim 是全屏幕文本编辑器，它没有菜单，只有命令
<img src="https://heuje.top/post-images/1560740527968.png" alt=""></p>
<p>文本编辑器的模式</p>
<pre><code>1）命令行模式
2）输入模式、编辑模式
3）末行模式
4）替换模式
</code></pre>
<h2 id="命令行模式">命令行模式</h2>
<pre><code>存盘 ZZ 保存退出

光标移动：
移动光标 h j k l 左 下 上 右 
光标移到本行开头home 
移到本行末尾 end 
光标移到末尾 G 
光标移到开头gg 
光标移动一个单词w
</code></pre>
<pre><code>粘贴复制：
复制一行 yy 复制 n行 nyy
粘贴 p


删除:
删除字符 x 向后删除 X 向前删除
删除一行 dd ndd
删除一个单词 dw


撤销：
撤销操作 u 向上一步 . 重复上一次操作


查找:
查找/string define \ 转义字符 查找“/bin/bash” /\/bin\/bash


删除与修改
“编辑”是指文字的添加、修改以及删除，甚至包括文字区块的移动、复制等。
在vim 中一般认为输入与编辑是两个概念。
编辑是在命令模式下进行的，先利用命令移动光标来定位到要进行编辑的地方，然后再使用相应的命令进行编辑；而输入是在插入模式下进行的。
</code></pre>
<p>在命令模式下常用的编辑命令：</p>
<pre><code>x     删除光标所在字符。
dd     删除光标所在的行。
r     修改光标所在字符，r 后是要修正的字符。
R     进入替换状态，输入的文本会覆盖原先的资料。
s     删除光标所在字符，并进入输入模式。
S     删除光标所在的行，并进入输入模式。
cc     修改整行文字。
u     撤消上一次操作。
.     重复上一次操作。
</code></pre>
<p>编辑模式</p>
<p>输入模式
在输入模式下，屏幕的左下方会出现INSERT 字样。
在输入状态下，用户可以输入文本的内容<br>
在插入模式下也可以删除字符，而标准的vim 编辑器在编辑状态下不能删除字符，只能插入字符</p>
<p>如何从命令行模式进入输入模式
a 从光标所在位置后面开始输入资料，光标后的资料随增加的资料向后移动。
A 从光标所在行最后面的位置开始输入资料。</p>
<p>插入（insert）
i 从光标所在位置前面开始插入资料，光标后的资料随新增资料向后移动。
I 从光标所在行的第一个非空白字符前面开始插入资料。</p>
<p>开始（open）
o 在光标所在行下新增一行并进入输入模式。
O 在光标所在行上方新增一行并进入输入模式。</p>
<p>如何退出输入模式
esc
末行模式</p>
<p>末行模式
只要在命令模式下输入命令“：”即可进入末行模式。</p>
<p>在末行模式下，可以进行保存文件、退出vim、进行查找和替换等操作。
:</p>
<p>当同时编辑多个文件时  因为同一时间只能显示一个文件，所以在VI中切换打开的文件可以使用N或n来切换打开的文件</p>
<pre><code>:n 切换下一个文件
:N 切换上一个文件
:q 退出
:q! 强制退出不保存
:w
:wq
</code></pre>
<p>替换</p>
<pre><code>:s/old/new 只替换光标所在行的第一个old string
:s/old/new/g 将本行（光标）的所有old string替换为new string   g global  n代表一个行号
:%s/old/new/g 将本文中所有的old string替换为new string
:1,2s/old/new/g 替换1到2行中的old string为new string
:.,2s/old/new/g .代表光标所在行 当前行到第二行的
:2,$s/old/new/g 替换2到最后一行中的old string为new string
</code></pre>
<p>:set nu 显示行号
:set nonu
:!command 在vim编辑器中执行一条命令（不许要退出当前的编辑，可以在编辑器中执行命令，类似退出编辑器执行命令）</p>
<p>查找
/string                    将光标定位到string 所在的行。
?string                    将光标移动到最近的一个包含 string 字符串的行
:n                          把光标定位到文件的第n 行。</p>
<p>保存文档
可以用:n，mw filename 命令将第n 行到第m 行的文字存放的所指定的filename 文件中。
替换模式</p>
<p>命令行下按R键进入替换模式
退出
esc
相关配置文件</p>
<p>~/.viminfo vim历史编辑文档</p>
<p>~/.vimrc vim个性设置文档</p>
<p>自定义文件头注释 ~/.vimrc</p>
<pre><code>autocmd BufNewFile *.py,*.sh,*.c exec &quot;:call SetTitle()&quot;

func SetTitle()
        if &amp;filetype == 'python'
                call setline(1,&quot;\#!/usr/bin/env python&quot;)
                call append(line(&quot;.&quot;),&quot;\#enconding=utf-8&quot;)
                call append(line(&quot;.&quot;)+1, &quot;\#Author: Bai Shuming&quot;)
                call append(line(&quot;.&quot;)+2, &quot;\#Created Time: &quot;.strftime(&quot;%Y/%m/%d %H:%M&quot;))
                call append(line(&quot;.&quot;)+3, &quot;&quot;)
    elseif &amp;filetype == 'sh'
                call setline(1,&quot;\#!/usr/bin/env bash&quot;)
                call append(line(&quot;.&quot;),&quot;\#enconding=utf-8&quot;)
                call append(line(&quot;.&quot;)+1, &quot;\#Author: Bai Shuming&quot;)
                call append(line(&quot;.&quot;)+2, &quot;\#Created Time: &quot;.strftime(&quot;%Y/%m/%d %H:%M&quot;))
                call append(line(&quot;.&quot;)+3, &quot;&quot;)
    elseif &amp;filetype == 'c'
        call setline(1,&quot;#include &lt;stdio.h&gt;&quot;)
        call append(line(&quot;.&quot;), &quot;&quot;)
        endif

endfunc
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker下MySQL基本操作]]></title>
        <id>https://heuje.top/post/docker-xia-mysql-ji-ben-cao-zuo</id>
        <link href="https://heuje.top/post/docker-xia-mysql-ji-ben-cao-zuo">
        </link>
        <updated>2019-06-05T04:50:55.000Z</updated>
        <content type="html"><![CDATA[<p>安装:
在docker仓库搜索MySQL镜像
docker search mysql
下载镜像
docker pull mysql
查看本地镜像
docker images -a</p>
<p>启动MySQL</p>
<ol>
<li>
<p>启动 mysql 容器，并进入 shell 命令交互界面： docker run -it mysql /bin/bash
(  参数 -i -t 等价于 -it  表示insert , 进入 ;  /bin/bash 表示 shell 脚本交互界面 )</p>
</li>
<li>
<p>可用 mysql --help | grep Distrib 查看 mysql 版本信息
（ mysql --help 查看帮助信息，并在结果集中 查找 Distrib ，
“|”单竖线表示命令的连续执行，同时以前一个命令值域作为后一个命令的定义域 ）</p>
</li>
<li>
<p>退出 当前交互窗口：exit 。此操作会关闭 mysql 服务 。
（对于创建的bush 容器，exit 退出后，容器也会退出。
这是因为对Docker 来说，容器中的应用退出了，容器也就没有必要继续运行了。）</p>
</li>
</ol>
<p>—— 想要服务一直运行可以：</p>
<h2 id="docker-run-p-33063306-name-jy_mysql-e-mysql_root_password123456-d-mysql参数-p-设置端口-name-取名-e-mysql_root_password123456-设置-账号为-root-密码为-123456-d-表示作为一个守护进程在后台运行"><code>docker run -p 3306:3306 --name JY_mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</code>
（参数 -p 设置端口，--name 取名 ，-e MYSQL_ROOT_PASSWORD=123456 设置 账号为 root ，密码为 123456 ，    -d 表示作为一个守护进程在后台运行 ）</h2>
<p>原文：https://blog.csdn.net/jiangyu1013/article/details/79958410</p>
<p>进入MySQL
<code>docker ps -a</code>
docker port 容器名字
至于相关文件地址配置 ，可以在运行容器时设置(但要求对应路径对应文件已存在，才能成功挂载相内容到对应位置。)
<code>docker run -p 3306:3306 --name mysql -v $PWD/conf/my.cnf:/etc/mysql/my.cnf -v $PWD/logs:/logs -v</code>$PWD/data:/mysql_data -e MYSQL_ROOT_PASSWORD=123456 -d mysql
命令说明：</p>
<p>-p 3306:3306：将容器的3306端口映射到主机的3306端口</p>
<p>-v $PWD/conf/my.cnf:/etc/mysql/my.cnf：将主机当前目录下的conf/my.cnf挂载到容器的/etc/mysql/my.cnf</p>
<p>-v $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs</p>
<p>-v $PWD/data:/mysql_data：将主机当前目录下的data目录挂载到容器的/mysql_data</p>
<p>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码</p>
<p><code>docker exec -it 8b6952783afc /bin/bash</code></p>
<p>Ctrl + D退出</p>
<pre><code>mysql -u root
use mysql
</code></pre>
<p>设置密码:
<code>UPDATE user SET password=PASSWORD('新的密码') WHERE user='root';</code></p>
<p>设置存储上限
修改mysql/bin/my.ini
<code>max_allowed_packet = 16M</code></p>
<p>登录数据库服务
<code>mysql -h 127.0.0.1 -u root -p -P 3306</code></p>
<p>修改权限，使得用户在其他主机仍然能够登录root用户并访问数据库
<code>grant all privileges on *.* to 'root'@'%' identified by '你的密码' with grant option;</code></p>
<p>修改sql_mode:
<code>set sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';</code></p>
<p>如果上面设置完成后依然报错，这里执行下面的SQL，将全局设置更改，然后必须关闭现有的连接，重新打开连接后查询即可</p>
<blockquote>
<p><code>set global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';</code></p>
</blockquote>
<hr>
<p>原文：https://blog.csdn.net/qq_28867949/article/details/76850378</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://heuje.top/post/hello-gridea</id>
        <link href="https://heuje.top/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>